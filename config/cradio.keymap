/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 
	/*
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
            combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
                    combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
                           combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        
           combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };  
    };
	*/

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T 						&kp Y &kp U  &kp I    &kp O   &kp P 
		&kp A &kp S &kp D &kp F &kp G 			        	        &kp H &kp J &kp K &kp L &kp QUOT
		&mt LSFT Z &kp X &kp C &kp V &kp B				        &kp N &kp M  &kp CMMA &kp DOT &mt LSFT RET
          				&mo 1 &kp LCTL  				&kp SPC &mo 2 
		>;
		};

       		left_layer {
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5		&kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0 
		&kp TAB    &kp LC(S)    &kp DQT      &kp PIPE2     &kp HASH 		&kp MINUS &kp EQL  &kp LBKT &kp RBKT  &kp DEL 
		&kp ESC    &kp TILDE 	&kp NON_US_BSLH &kp NON_US_HASH  &kp TILDE2 	&kp MINUS &kp GRAVE &kp LBKT &kp RBKT  &kp DEL 
					    &mo 1  &kp LGUI  					&kp RGUI &mo 2 
		>;
		};
		
		right_layer {
		bindings = <
		&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN 
		&kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			&kp MINUS &kp KP_EQUAL  &kp LBRC  &kp RBRC   &kp BKSP
		&kp LSFT  &kp KPLS &kp LBKT &kp RBKT   &kp BSLH    			&kp UNDER &kp LEFT &kp DOWN &kp UP  &kp RIGHT
					  &mo 3 &kp LCTL  				&kp SPC  &mo 2 
		>;
		};	
		
		tri_layer {
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5 			&trans &trans   &tog 4   &trans  &trans
		&kp F1 &kp F2 &kp F3 &kp F4 &kp F5  						&trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans 
		&bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7   				&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   
					 &trans &trans  					&trans &trans 
		>;
		};

		/* GAMING LAYER */
        quad_layer {
		bindings = <    
		&kp TAB    &kp Q   &kp W    &kp E    &kp R  					&trans 	&trans   	&trans  	 	&trans  	&trans
		&kp LSFT   &kp A   &kp S    &kp D    &kp F  					&trans 	&kp PG_UP  	&kp K_VOL_UP 	&kp K_MUTE 	&trans 
		&kp LCTRL  &kp Z   &kp X    &kp C    &kp V   				    &trans 	&kp PG_DN  	&kp K_VOL_DN  	&trans 		&trans   
					 				&mo 5    &kp SPC  					&trans 	&trans 
		>;
		};

		/* GAMING LAYER */
		penta_layer {
		bindings = <    
		&kp ESC    &trans &trans &trans  &kp T  			&tog 0   &trans     &trans         &trans       &tog 0
		&trans    &trans &trans &trans  &kp G  			&trans   &kp PG_UP  &kp K_VOL_UP   &kp K_MUTE   &trans 
		&kp CAPS  &trans &trans &trans  &kp B   		&trans   &kp PG_DN  &kp K_VOL_DN   &trans       &trans   
					 &mo 5 &trans  					    &trans &trans 
		>;
		};	
        
	};

void render_YOUR_logo(void) { 

// 'Untitled', 128x32px
const unsigned char epd_bitmap_Untitled [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x3f, 0xff, 0xff, 0x1f, 0x1f, 0xb7, 0x77, 
	0x77, 0x77, 0xef, 0xef, 0xe3, 0xe3, 0xff, 0xf7, 0xf7, 0xef, 0xff, 0xff, 0xdf, 0x8f, 0x8f, 0x7f, 
	0x7f, 0x9f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfb, 0xfb, 0xf7, 0x2e, 0x2e, 0xc5, 0xc3, 0xc3, 0x24, 0x24, 0x53, 0x4f, 
	0x4f, 0x4b, 0x97, 0x97, 0xcf, 0xcf, 0xe6, 0x65, 0x65, 0x6b, 0x6f, 0x6f, 0x4e, 0x2d, 0x2d, 0x5b, 
	0x5b, 0x3b, 0x66, 0x66, 0x01, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 
	0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xf7, 0xf7, 
	0x87, 0x77, 0x77, 0xf7, 0xf7, 0xf7, 0x17, 0x17, 0xb7, 0xf7, 0xf7, 0xf7, 0x7f, 0x7f, 0x73, 0xeb, 
	0xeb, 0xd7, 0xd7, 0xff, 0xff, 0xff, 0xdf, 0x8f, 0x8f, 0xff, 0x9f, 0x9f, 0x7f, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf9, 0x36, 0x16, 0x17, 0xc0, 0xc0, 0xe8, 0xe8, 
	0xe8, 0xe0, 0x41, 0x41, 0x01, 0x01, 0x00, 0x00, 0x00, 0x21, 0x91, 0x91, 0x51, 0xf1, 0xf1, 0xfd, 
	0xfd, 0x3d, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xbd, 0xbd, 0xb9, 0xb9, 0xbb, 0x7b, 0x7b, 0x7d, 
	0x7f, 0x7f, 0x7f, 0x5e, 0x5e, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0xef, 0xef, 0xef, 
	0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xc4, 0xc4, 
	0xb8, 0xbe, 0xbe, 0xae, 0xb2, 0xf2, 0xce, 0xce, 0xcf, 0xdd, 0xdd, 0xfb, 0xfb, 0xfb, 0xf7, 0x86, 
	0x86, 0xf7, 0xf7, 0xfb, 0x2d, 0x2d, 0x8c, 0x6d, 0x6d, 0xd9, 0xfb, 0xfb, 0xf6, 0xf6, 0x81, 0x5f, 
	0x5f, 0x5f, 0x5f, 0x5f, 0xdf, 0xdf, 0xdf, 0x5f, 0x5f, 0xdf, 0xdf, 0xdf, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc7, 0xc7, 0xc1, 0xc0, 0xc0, 0xc0, 0xc1, 0xc1, 0xc3, 0xc3, 0xf3, 0xfb, 
	0xfb, 0xfb, 0xfc, 0xfc, 0xff, 0xff, 0xfc, 0xf8, 0xf8, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe1, 
	0xe1, 0xe6, 0xe7, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 
	0xff, 0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 528)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
	epd_bitmap_Untitled
};

  oled_write_raw_P(YOUR_logo, sizeof(YOUR_logo));
};
render_YOUR_logo(void);
};
